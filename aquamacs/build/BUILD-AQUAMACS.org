This file describes the process of building Aquamacs in various ways.

The Aquamacs git repository is at https://github.com/aquamacs-emacs/aquamacs-emacs.

* Aquamacs resources on the Internet
Besides the main web site at https://aquamacs.org, there are:
- Main source code repository: https://github.com/aquamacs-emacs/aquamacs-emacs
- Aquamacs issue tracker: https://github.com/aquamacs-emacs/aquamacs-emacs/issues. Bug reports can also be sent to aquamacs-bugs@aquamacs.org.
- General Aquamacs email list: macosx-emacs@email.esm.psu.edu
- Aquamacs development email list: aquamacs-devel@googlegroups.com
* Personal build
To build Aquamacs, you will need to install XCode (Apple's Developer Tools), including the command-line version of the tools. You can find current instructions for doing that for your Mac OS version on the web. You'll need to have the path to the command-line tools (usually /Applications/Xcode.app/Contents/Developer/usr/bin) in your PATH.

You will also need the GNU software tools autoconf and automake. These can be installed with Homebrew (https://brew.sh), with the Homebrew directory (usually /usr/local/bin) in your PATH.

To build Aquamacs for personal use, to add a new feature, or fix a bug, it is usually sufficient to run

  ./build-aquamacs

in the top-level Aquamacs directory. This will produce the Aquamacs application bundle in nexstep/Aquamacs.app

If you are changing code that doesn't require re-running configure, it is usually sufficient recompile using

  make install

in the top-level Aquamacs directory. The "install" target is used because the full application bundle needs to be assembled, not just the Aquamacs binary.

See the "build-aquamacs" section for more details.

Note that, although the compiler command usually is printed as gcc, it is almost always Apple's llvm compiler. The Xcode tools link it to the name gcc. Arguments to the compiler must be chose accordingly.

If you want to contribute changes to the Aquamacs project (which we greatly appreciate!), please read the "Development build" section as well.
* Development build: build-aquamacs
The ~build-aquamacs~ script is intended to be the simplest possible way to build Aquamacs for personal use, while having enough flexibility to be the core used to build other versions for development and release.

For simplicity, build-aquamacs does not have a lot of options. See the script file for more information.

Things build-aquamacs does not do:

- build the documentation
- bundle external libraries for distribution
- code-sign the application

Environment variables you can set:
- DEBUG_CONFIG_OPTS :: options passed to ~configure~
- DEBUG_CFLAGS :: Debugging flags for the compiler. Actually, they can be any flags, but it's primarily intended for debugging.
- GZIP :: set it to empty to avoid the overhead of compressing the Emacs source lisp files in the application bundle during development

* Nightly build
The nightly build process (driven by ~aquamacs/build/nightly-build.sh~) is used by the Aquamacs maintainer to make sure that the current git head builds correctly for distribution and to produce nightly test versions for anyone interested to try.

The process goes through the following steps:
1. Download the latest HEAD from the Aquamacs git repository
2. Build the Aquamacs documentation
3. Build the Aquamacs application bundle
4. Copy the necessary external libraries (notably gnutls and its dependencies) into
    the application bundle.
5. Sign the release
6. Create a compressed tar file (.tar.bz2) of the application bundle
7. Upload the compressed tar file to a web server

If the process fails at any point, the build aborts.

For the normal build process in step 3, the nightly build uses the normal build-aquamacs script with the -release option, and it should not set any environment variables relevant to build-aquamacs.

The following environment variables affect the behavior:

- NIGHTLY_DIR (Default: ~/Nightly) :: Directory used for nightly builds
- BRANCH (Default: aquamacs3) :: Git branch to build from
- GIT (Default: yes) :: Update from github before compiling
- POST (Default: yes) :: Post the resulting kit to the nightly build location if the build is successful
- REPO (Default: Aquamacs github) :: Git repository to build from
- DOC_FAILED_EXIT (Default: 1) :: If 1, exit if the documentation builds fails. Sometimes in working with the nightly build setup, it's handy not to worry about the doc builds.

Logs of the build are kept in ${NIGHTLY_DIR}/logs. There are separate logs for documentation build and the application build.

* Release build
TBD
* Debugging
- The file ~src/.gdbinit~ is automatically loaded by ~gdb~ if you are starting it in that directory, which is recommended if you are debugging Aquamacs. The commands are special for helping to debug Emacs, especially to get information about what's going on in the Lisp code.
- The file ~src/.gdbmac~ has some addition useful GDB debugging commands for the Mac if you are running Aquamacs under ~gdb~. The memory debugging environment variables can be used outside of ~gdb~. Also, you may want to change the particular environment variables in use at any given time. The defaults are generally useful for debugging the Mac-specific code.
- Aquamacs does not seem to run under ~lldb~.
