This file describes the process of building Aquamacs in various ways.

The Aquamacs git repository is at https://github.com/aquamacs-emacs/aquamacs-emacs.

* Things that have to be done before committing all this
** TODO build-aquamacs should have a way for specifying CFLAGS and configure options
** TODO Things taken out of build-aquamacs
- texinfo/tex build

* Aquamacs resources on the Internet
Besides the main web site at https://aquamacs.org, there are:
- Main source code repository: https://github.com/aquamacs-emacs/aquamacs-emacs
- Aquamacs issue tracker: https://github.com/aquamacs-emacs/aquamacs-emacs/issues. Bug reports can also be sent to aquamacs-bugs@aquamacs.org.
- General Aquamacs email list: macosx-emacs@email.esm.psu.edu
- Aquamacs development email list: aquamacs-devel@googlegroups.com

* Personal build
To build Aquamacs, you will need to install XCode (Apple's Developer Tools), including the command-line version of the tools. You can find current instructions for doing that for your Mac OS version on the web. You'll need to have the path to the command-line tools (usually /Applications/Xcode.app/Contents/Developer/usr/bin) in your PATH.

You will also need the GNU software tools autoconf and automake. These can be installed with Homebrew (https://brew.sh), with the Homebrew directory (usually /usr/local/bin) in your PATH.

To build Aquamacs for personal use, to add a new feature, or fix a bug, it is usually sufficient to run

  ./build-aquamacs

in the top-level Aquamacs directory. This will produce the Aquamacs application bundle in nexstep/Aquamacs.app

If you are changing code that doesn't require re-running configure, it is usually sufficient recompile using

  make install

in the top-level Aquamacs directory. The "install" target is used because the full application bundle needs to be assembled, not just the Aquamacs binary.

See the "build-aquamacs" section for more details.

Note that, although the compiler command usually is printed as gcc, it is almost always Apple's llvm compiler. The Xcode tools link it to the name gcc. Arguments to the compiler must be chose accordingly.

If you want to contribute changes to the Aquamacs project (which we greatly appreciate!), please read the "Development build" section as well.
* build-aquamacs
The build-aquamacs is intended to be the simplest possible way to build Aquamacs for personal use, while having enough flexibility to be the core used to build other versions for development and release.

The exact behavior of build-aquamacs can be affected by the setting of some environment variables. For convenience, the script source the bash file ~/.aqbuildrc if it exists.

Things build-aquamacs does not do:

- build the documentation
- build for compatibility with earlier OS versions
- bundle external libraries for distribution
- code-sign the application


* Development build


* Nightly build
The nightly build process (driven by aquamacs/build/nightly-build.sh) is used by the Aquamacs maintainer to make sure that the current git head builds correctly for distribution and to produce nightly test versions for anyone interested to try.

The process goes through the following steps:
1. Download the latest HEAD from the Aquamacs git repository
2. Build the Aquamacs documentation
3. Build the Aquamacs application bundle
4. Copy the necessary external libraries (notably gnutls and its dependencies) into
    the application bundle.
5. Create a compressed tar file (.tar.bz2) of the application bundle
6. Upload the compressed tar file to a web server

The nightly build is not code-signed.

If the process fails at any point, the build aborts.

For the normal build process in step 3, the nightly build uses the normal build-aquamacs script with the -release option, and it should not set any environment variables relevant to build-aquamacs.

The default directory for nightly builds is ~/Nightly (NIGHTLY_DIR). Changing this is not hard, but doing so has not been tested and there are possible bugs with that.

Logs of the build are kept in ${NIGHTLY_DIR}/logs. There are separate logs for documentation build and the application build.

The script has a few environment variables that can be overridden in some specific circumstances. See the script for details.

If you are working on the nightly-build script, see the script comments for details on how to keep your work from being overwritten by the git updates.

The upload script depends on both the local system configuration and the web server used to distribute the builds, so it is not part of the repository.
* Release build
